<interview>
<topic>Hibernate</topic>
<qa>
<q>1.What is ORM ?</q>
<a>ORM stands for object/relational mapping. ORM is the automated persistence of objects in a Java application to the tables in a relational database.</a>
</qa><qa>
<q>2.What does ORM consists of ?</q>
<a>An ORM solution consists of the followig four pieces:</a>
<a>API for performing basic CRUD operations</a>
<a>API to express queries refering to classes</a>
<a>Facilities to specify metadata</a>
<a>Optimization facilities : dirty checking,lazy associations fetching</a>
</qa>
<qa>
<q>3.What are the ORM levels ?</q>
<a>The ORM levels are:</a>
<a>Pure relational (stored procedure.)</a>
<a>Light objects mapping (JDBC)</a>
<a>Medium object mapping</a>
<a>Full object Mapping (composition,inheritance, polymorphism, persistence by reachability)</a>
</qa><qa>
<q>4.What is Hibernate?</q>
<a>Hibernate is a pure Java object-relational mapping (ORM) and persistence framework that allows you to map plain old Java objects to relational database tables using (XML) configuration files.Its purpose is to relieve the developer from a significant amount of relational data persistence-related programming tasks.</a>
</qa><qa>
<q>5.Why do you need ORM tools like hibernate?</q>
<a>The main advantage of ORM like hibernate is that it shields developers from messy SQL. Apart from this, ORM provides following benefits:</a>
<a>Improved productivity</a>
<a>High-level object-oriented API</a>
<a>Less Java code to write</a>
<a>No SQL to write</a>
<a>Improved performance</a>
<a>Sophisticated caching</a>
<a>Lazy loading</a>
<a>Eager loading</a>
<a>Improved maintainability</a>
<a>A lot less code to write</a>
<a>Improved portability</a>
<a>ORM framework generates database-specific SQL for you</a>
</qa><qa>
<q>6.What Does Hibernate Simplify?</q>
<a>Hibernate simplifies:</a>
<a>Saving and retrieving your domain objects</a>
<a>Making database column and table name changes</a>
<a>Centralizing pre save and post retrieve logic</a>
<a>Complex joins for retrieving related items</a>
<a>Schema creation from object model</a>
</qa><qa>
<q>7.What is the need for Hibernate xml mapping file?</q>
<a>Hibernate mapping file tells Hibernate which tables and columns to use to load and store objects. Typical mapping file look as follows:</a>
<a>Hibernate Mapping file</a>
</qa><qa>
<q>8.What are the most common methods of Hibernate configuration?</q>
<a>The most common methods of Hibernate configuration are:</a>
<a>Programmatic configuration</a>
<a>XML configuration (hibernate.cfg.xml)</a>
</qa><qa>
<q>9.What are the important tags of hibernate.cfg.xml?</q>
<a>Following are the important tags of hibernate.cfg.xml:</a>
<a>hibernate.cfg.xml</a>
</qa><qa>
<q>10.What are the Core interfaces are of Hibernate framework?</q>
<a>The five core interfaces are used in just about every Hibernate application. Using these interfaces, you can store and retrieve persistent objects and control transactions.</a>
<a>Session interface</a>
<a>SessionFactory interface</a>
<a>Configuration interface</a>
<a>Transaction interface</a>
<a>Query and Criteria interfaces</a>
</qa><qa>
<q>11.What role does the Session interface play in Hibernate?</q>
<a>The Session interface is the primary interface used by Hibernate applications. It is a single-threaded, short-lived object representing a conversation between the application and the persistent store. It allows you to create query objects to retrieve persistent objects.</a>
<a>Session session = sessionFactory.openSession();</a>
<a>Session interface role:</a>
<a>Wraps a JDBC connection</a>
<a>Factory for Transaction</a>
<a>Holds a mandatory (first-level) cache of persistent objects, used when navigating the object graph or looking up objects by identifier</a>
</qa><qa>
<q>12.What role does the SessionFactory interface play in Hibernate?</q>
<a>The application obtains Session instances from a SessionFactory. There is typically a single SessionFactory for the whole applicationå¹¼reated during application initialization. The SessionFactory caches generate SQL statements and other mapping metadata that Hibernate uses at runtime. It also holds cached data that has been read in one unit of work and may be reused in a future unit of work</a>
<a>SessionFactory sessionFactory = configuration.buildSessionFactory();</a>
</qa><qa>
<q>13.What is the general flow of Hibernate communication with RDBMS?</q>
<a>The general flow of Hibernate communication with RDBMS is :</a>
<a>Load the Hibernate configuration file and create configuration object. It will automatically load all hbm mapping files</a>
<a>Create session factory from configuration object</a>
<a>Get one session from this session factory</a>
<a>Create HQL Query</a>
<a>Execute query to get list containing Java objects</a>
</qa><qa>
<q>14.What is Hibernate Query Language (HQL)?</q>
<a>Hibernate offers a query language that embodies a very powerful and flexible mechanism to query, store, update, and retrieve objects from a database. This language, the Hibernate query Language (HQL), is an object-oriented extension to SQL.</a>
</qa><!-- <qa>
<q>15.How do you map Java Objects with Database tables?</q>
<a>First we need to write Java domain objects (beans with setter and getter).</a>
<a>Write hbm.xml, where we map java class to table and database columns to Java class variables.</a>
<a>Example :</a>
<a><hibernate-mapping></a>
<a>  <class name="com.test.User"  table="user"></a>
<a>   <property  column="USER_NAME" length="255" </a>
<a>      name="userName" not-null="true"  type="java.lang.String"/></a>
<a>   <property  column="USER_PASSWORD" length="255"</a>
<a>     name="userPassword" not-null="true"  type="java.lang.String"/></a>
<a> </class></a>
<a></hibernate-mapping></a>
</qa> --><qa>
<q>16.What is the difference between load() and get()?</q>
<a>load() vs. get() :-</a>
<a>load() </a>
<a>Only use the load() method if you are sure that the object exists. </a>
<a>load() method will throw an exception if the unique id is not found in the database. </a>
<a>load() just returns a proxy by default and database won’t be hit until the proxy is first invoked.  </a>
</qa><qa>
<q>17.What is the difference between and merge and update ?</q>
<a>Use update() if you are sure that the session does not contain an already persistent instance with the same identifier, and merge() if you want to merge your modifications at any time without consideration of the state of the session.</a>
</qa><!-- <qa>
<q>18.How do you define sequence generated primary key in hibernate?</q>
<a>Using <generator> tag.</a>
<a>Example:-</a>
<a><id column="USER_ID" name="id" type="java.lang.Long"> </a>
<a>   <generator class="sequence"> </a>
<a>     <param name="table">SEQUENCE_NAME</param></a>
<a>   <generator></a>
<a></id></a>
</qa> --><qa>
<q>19.Define cascade and inverse option in one-many mapping?</q>
<a>cascade - enable operations to cascade to child entities.</a>
<a>cascade="all|none|save-update|delete|all-delete-orphan"</a>
<a>inverse - mark this collection as the "inverse" end of a bidirectional association.</a>
<a>inverse="true|false" </a>
<a>Essentially "inverse" indicates which end of a relationship should be ignored, so when persisting a parent who has a collection of children, should you ask the parent for its list of children, or ask the children who the parents are?</a>
</qa><!-- <qa>
<q>20.What do you mean by Named – SQL query?</q>
<a>Named SQL queries are defined in the mapping xml document and called wherever required.</a>
<a>Example:</a>
<a><sql-query name = "empdetails"></a>
<a>   <return alias="emp" class="com.test.Employee"/></a>
<a>      SELECT emp.EMP_ID AS {emp.empid},</a>
<a>                 emp.EMP_ADDRESS AS {emp.address},</a>
<a>                 emp.EMP_NAME AS {emp.name} </a>
<a>      FROM Employee EMP WHERE emp.NAME LIKE :name</a>
<a></sql-query></a>
<a>Invoke Named Query :</a>
<a>List people = session.getNamedQuery("empdetails")</a>
</qa> --><!-- <qa>
<q>21.How do you invoke Stored Procedures?</q>
<a><sql-query name="selectAllEmployees_SP" callable="true"></a>
<a> <return alias="emp" class="employee"></a>
<a>   <return-property name="empid" column="EMP_ID"/>       </a>
</qa><qa>
<q>   <return-property name="name" column="EMP_NAME"/>       </q>
<a>   <return-property name="address" column="EMP_ADDRESS"/></a>
<a>    { ? = call selectAllEmployees() }</a>
<a> </return></a>
<a></sql-query></a>
</qa> --><qa>
<q>22.Explain Criteria API</q>
<a>Criteria is a simplified API for retrieving entities by composing Criterion objects. This is a very convenient approach for functionality like "search" screens where there is a variable number of conditions to be placed upon the result set.</a>
<a>Example :</a>
<a>List employees = session.createCriteria(Employee.class)</a>
</qa><qa>
<q>23.Define HibernateTemplate?</q>
<a>org.springframework.orm.hibernate.HibernateTemplate is a helper class which provides different methods for querying/retrieving data from the database. It also converts checked HibernateExceptions into unchecked DataAccessExceptions.</a>
</qa><qa>
<q>24.What are the benefits does HibernateTemplate provide?</q>
<a>The benefits of HibernateTemplate are :</a>
<a>HibernateTemplate, a Spring Template class simplifies interactions with Hibernate Session.</a>
<a>Common functions are simplified to single method calls.</a>
<a>Sessions are automatically closed.</a>
<a>Exceptions are automatically caught and converted to runtime exceptions.</a>
</qa><qa>
<q>25.How do you switch between relational databases without code changes?</q>
<a>Using Hibernate SQL Dialects , we can switch databases. Hibernate will generate appropriate hql queries based on the dialect defined.</a>
</qa><!-- <qa>
<q>26.If you want to see the Hibernate generated SQL statements on console, what should we do?</q>
<a>In Hibernate configuration file set as follows: </a>
<a><property name="show_sql">true</property></a>
</qa> --><qa>
<q>27.What are derived properties?</q>
<a>The properties that are not mapped to a column, but calculated at runtime by evaluation of an expression are called derived properties. The expression can be defined using the formula attribute of the element.</a>
</qa><qa>
<q>28.What is component mapping in Hibernate?</q>
<a>A component is an object saved as a value, not as a reference</a>
<a>A component can be saved directly without needing to declare interfaces or identifier properties</a>
<a>Required to define an empty constructor</a>
<a>Shared references not supported</a>
<a>Example:</a>
<a>Component Mapping</a>
</qa><qa>
<q>29.What is the difference between sorted and ordered collection in hibernate?</q>
<a>sorted collection vs. order collection :-</a>
<a>sorted collection </a>
<a>A sorted collection is sorting a collection by utilizing the sorting features provided by the Java collections framework. The sorting occurs in the memory of JVM which running Hibernate, after the data being read from database using java comparator. </a>
<a>If your collection is not large, it will be more efficient way to sort it. </a>
</qa><qa>
<q>31.What is the advantage of Hibernate over jdbc?</q>
<a>Hibernate Vs. JDBC :-</a>
<a>JDBC </a>
<a>With JDBC, developer has to write code to map an object model's data representation to a relational data model and its corresponding database schema.  </a>
<a>With JDBC, the automatic mapping of Java objects with database tables and vice versa conversion is to be taken care of by the developer manually with lines of code.  </a>
<a>JDBC supports only native Structured Query Language (SQL). Developer has to find out the efficient way to access database, i.e. to select effective query from a number of queries to perform same task.  </a>
<a>Application using JDBC to handle persistent data (database tables) having database specific code in large amount. The code written to map table data to application objects and vice versa is actually to map table fields to object properties. As table changed or database changed then it’s essential to change object structure as well as to change code written to map table-to-object/object-to-table. </a>
<a>With JDBC, it is developer’s responsibility to handle JDBC result set and convert it to Java objects through code to use this persistent data in application. So with JDBC, mapping between Java objects and database tables is done manually.  </a>
<a>With JDBC, caching is maintained by hand-coding.  </a>
<a>In JDBC there is no check that always every user has updated data. This check has to be added by the developer.  </a>
</qa><qa>
<q>32.What are the Collection types in Hibernate ?</q>
<a>Bag</a>
<a>Set</a>
<a>List</a>
<a>Array</a>
<a>Map</a>
</qa><qa>
<q>33.What are the ways to express joins in HQL?</q>
<a>HQL provides four ways of expressing (inner and outer) joins:-</a>
<a>An implicit association join</a>
<a>An ordinary join in the FROM clause</a>
<a>A fetch join in the FROM clause.</a>
<a>A theta-style join in the WHERE clause.</a>
</qa><qa>
<q>34.Define cascade and inverse option in one-many mapping?</q>
<a>cascade - enable operations to cascade to child entities.</a>
<a>cascade="all|none|save-update|delete|all-delete-orphan"</a>
<a>inverse - mark this collection as the "inverse" end of a bidirectional association.</a>
<a>inverse="true|false" </a>
<a>Essentially "inverse" indicates which end of a relationship should be ignored, so when persisting a parent who has a collection of children, should you ask the parent for its list of children, or ask the children who the parents are?</a>
</qa><qa>
<q>35.What is Hibernate proxy?</q>
<a>The proxy attribute enables lazy initialization of persistent instances of the class. Hibernate will initially return CGLIB proxies which implement the named interface. The actual persistent object will be loaded when a method of the proxy is invoked.</a>
</qa><qa>
<q>36.How can Hibernate be configured to access an instance variable directly and not through a setter method ?</q>
<a>By mapping the property with access="field" in Hibernate metadata. This forces hibernate to bypass the setter method and access the instance variable directly while initializing a newly loaded object.</a>
</qa><qa>
<q>37.How can a whole class be mapped as immutable?</q>
<a>Mark the class as mutable="false" (Default is true),. This specifies that instances of the class are (not) mutable. Immutable classes, may not be updated or deleted by the application.</a>
</qa><qa>
<q>38.What is the use of dynamic-insert and dynamic-update attributes in a class mapping?</q>
<a>Criteria is a simplified API for retrieving entities by composing Criterion objects. This is a very convenient approach for functionality like "search" screens where there is a variable number of conditions to be placed upon the result set.</a>
<a>dynamic-update (defaults to false): Specifies that UPDATE SQL should be generated at runtime and contain only those columns whose values have changed</a>
<a>dynamic-insert (defaults to false): Specifies that INSERT SQL should be generated at runtime and contain only the columns whose values are not null.</a>
</qa><qa>
<q>39.What do you mean by fetching strategy ?</q>
<a>A fetching strategy is the strategy Hibernate will use for retrieving associated objects if the application needs to navigate the association. Fetch strategies may be declared in the O/R mapping metadata, or over-ridden by a particular HQL or Criteria query.</a>
</qa><qa>
<q>40.What is automatic dirty checking?</q>
<a>Automatic dirty checking is a feature that saves us the effort of explicitly asking Hibernate to update the database when we modify the state of an object inside a transaction.</a>
</qa><qa>
<q>41.What is transactional write-behind?</q>
<a>Hibernate uses a sophisticated algorithm to determine an efficient ordering that avoids database foreign key constraint violations but is still sufficiently predictable to the user. This feature is called transactional write-behind.</a>
</qa><qa>
<q>42.What are Callback interfaces?</q>
<a>Callback interfaces allow the application to receive a notification when something interesting happens to an object—for example, when an object is loaded, saved, or deleted. Hibernate applications don't need to implement these callbacks, but they're useful for implementing certain kinds of generic functionality.</a>
</qa><qa>
<q>43.What are the types of Hibernate instance states ?</q>
<a>Three types of instance states:</a>
<a>Transient -The instance is not associated with any persistence context</a>
<a>Persistent -The instance is associated with a persistence context</a>
<a>Detached -The instance was associated with a persistence context which has been closed – currently not associated</a>
</qa><!-- <qa>
<q>44.What are the differences between EJB 3.0 & Hibernate</q>
<a>Hibernate Vs EJB 3.0 :-</a>
<a>Hibernate </a>
<a>Session–Cache or collection of loaded objects relating to a single unit of work </a>
<a>XDoclet Annotations used to support Attribute Oriented Programming </a>
<a>Defines HQL for expressing queries to the database </a>
<a>Supports Entity Relationships through mapping files and annotations in JavaDoc </a>
<a>Provides a Persistence Manager API exposed via the Session, Query, Criteria, and Transaction API </a>
<a>Provides callback support through lifecycle, interceptor, and validatable interfaces </a>
<a>Entity Relationships are unidirectional. Bidirectional relationships are implemented by two unidirectional relationships </a>
</qa> --><qa>
<q>45.What are the types of inheritance models in Hibernate?</q>
<a>There are three types of inheritance models in Hibernate:</a>
<a>Table per class hierarchy</a>
<a>Table per subclass</a>
<a>Table per concrete class</a>
</qa>
</interview>